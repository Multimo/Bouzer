var _user$project$Spelling$toLi = function (s) {
	return A2(
		_elm_lang$html$Html$li,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('list pa2')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(
				_elm_lang$core$Basics$toString(s))
			]));
};
var _user$project$Spelling$check = _elm_lang$core$Native_Platform.outgoingPort(
	'check',
	function (v) {
		return v;
	});
var _user$project$Spelling$suggestions = _elm_lang$core$Native_Platform.incomingPort(
	'suggestions',
	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string));
var _user$project$Spelling$initialTabs = _elm_lang$core$Native_Platform.incomingPort(
	'initialTabs',
	_elm_lang$core$Json_Decode$list(
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)));
var _user$project$Spelling$Model = F3(
	function (a, b, c) {
		return {word: a, suggestions: b, tabs: c};
	});
var _user$project$Spelling$init = {
	ctor: '_Tuple2',
	_0: A3(
		_user$project$Spelling$Model,
		'',
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[])),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Spelling$Tabs = function (a) {
	return {ctor: 'Tabs', _0: a};
};
var _user$project$Spelling$update = F2(
	function (msg, model) {
		var _p0 = A2(_elm_lang$core$Debug$log, 'my message', _user$project$Spelling$Tabs);
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'Change':
				return {
					ctor: '_Tuple2',
					_0: A3(
						_user$project$Spelling$Model,
						_p1._0,
						_elm_lang$core$Native_List.fromArray(
							[]),
						model.tabs),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Check':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Spelling$check(model.word)
				};
			case 'Suggest':
				return {
					ctor: '_Tuple2',
					_0: A3(_user$project$Spelling$Model, model.word, _p1._0, model.tabs),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: A3(
						_user$project$Spelling$Model,
						model.word,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_p1._0),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Spelling$Suggest = function (a) {
	return {ctor: 'Suggest', _0: a};
};
var _user$project$Spelling$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Spelling$suggestions(_user$project$Spelling$Suggest),
				_user$project$Spelling$initialTabs(_user$project$Spelling$Tabs)
			]));
};
var _user$project$Spelling$Check = {ctor: 'Check'};
var _user$project$Spelling$Change = function (a) {
	return {ctor: 'Change', _0: a};
};
var _user$project$Spelling$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('pa5')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$input,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onInput(_user$project$Spelling$Change)
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$Spelling$Check)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Check')
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(_elm_lang$core$String$join, ', ', model.suggestions))
					])),
				A2(
				_elm_lang$html$Html$ul,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('pa0')
					]),
				A2(_elm_lang$core$List$map, _user$project$Spelling$toLi, model.tabs))
			]));
};
var _user$project$Spelling$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Spelling$init, view: _user$project$Spelling$view, update: _user$project$Spelling$update, subscriptions: _user$project$Spelling$subscriptions})
};
