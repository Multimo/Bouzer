var _user$project$Spelling$onKeyUp = function (options) {
	var filter = F2(
		function (optionsToCheck, code) {
			filter:
			while (true) {
				var _p0 = optionsToCheck;
				if (_p0.ctor === '[]') {
					return _elm_lang$core$Result$Err('key code is not in the list');
				} else {
					if (_elm_lang$core$Native_Utils.eq(_p0._0._0, code)) {
						return _elm_lang$core$Result$Ok(_p0._0._1);
					} else {
						var _v1 = _p0._1,
							_v2 = code;
						optionsToCheck = _v1;
						code = _v2;
						continue filter;
					}
				}
			}
		});
	var keyCodes = A2(
		_elm_lang$core$Json_Decode$customDecoder,
		_elm_lang$html$Html_Events$keyCode,
		filter(options));
	return A2(_elm_lang$html$Html_Events$on, 'keyup', keyCodes);
};
var _user$project$Spelling$onEnterOrLeft = F2(
	function (enter, escape) {
		return _user$project$Spelling$onKeyUp(
			_elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: 13, _1: enter},
					{ctor: '_Tuple2', _0: 27, _1: escape}
				]));
	});
var _user$project$Spelling$onDownArrow = function (msg) {
	return _user$project$Spelling$onKeyUp(
		_elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: 40, _1: msg}
			]));
};
var _user$project$Spelling$onUpArrow = function (msg) {
	return _user$project$Spelling$onKeyUp(
		_elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: 38, _1: msg}
			]));
};
var _user$project$Spelling$onLeftArrow = function (msg) {
	return _user$project$Spelling$onKeyUp(
		_elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: 37, _1: msg}
			]));
};
var _user$project$Spelling$onRightArrow = function (msg) {
	return _user$project$Spelling$onKeyUp(
		_elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: 39, _1: msg}
			]));
};
var _user$project$Spelling$onEnter = function (msg) {
	return _user$project$Spelling$onKeyUp(
		_elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: 13, _1: msg}
			]));
};
var _user$project$Spelling$check = _elm_lang$core$Native_Platform.outgoingPort(
	'check',
	function (v) {
		return v;
	});
var _user$project$Spelling$close = _elm_lang$core$Native_Platform.outgoingPort(
	'close',
	function (v) {
		return v;
	});
var _user$project$Spelling$activate = _elm_lang$core$Native_Platform.outgoingPort(
	'activate',
	function (v) {
		return v;
	});
var _user$project$Spelling$suggestions = _elm_lang$core$Native_Platform.incomingPort(
	'suggestions',
	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string));
var _user$project$Spelling$initialTabs = _elm_lang$core$Native_Platform.incomingPort(
	'initialTabs',
	_elm_lang$core$Json_Decode$list(
		A2(
			_elm_lang$core$Json_Decode$andThen,
			A2(_elm_lang$core$Json_Decode_ops[':='], 'url', _elm_lang$core$Json_Decode$string),
			function (url) {
				return A2(
					_elm_lang$core$Json_Decode$andThen,
					A2(_elm_lang$core$Json_Decode_ops[':='], 'title', _elm_lang$core$Json_Decode$string),
					function (title) {
						return A2(
							_elm_lang$core$Json_Decode$andThen,
							A2(_elm_lang$core$Json_Decode_ops[':='], 'active', _elm_lang$core$Json_Decode$bool),
							function (active) {
								return A2(
									_elm_lang$core$Json_Decode$andThen,
									A2(_elm_lang$core$Json_Decode_ops[':='], 'tabID', _elm_lang$core$Json_Decode$int),
									function (tabID) {
										return A2(
											_elm_lang$core$Json_Decode$andThen,
											A2(_elm_lang$core$Json_Decode_ops[':='], 'favIconUrl', _elm_lang$core$Json_Decode$string),
											function (favIconUrl) {
												return _elm_lang$core$Json_Decode$succeed(
													{url: url, title: title, active: active, tabID: tabID, favIconUrl: favIconUrl});
											});
									});
							});
					});
			})));
var _user$project$Spelling$TabsList = F5(
	function (a, b, c, d, e) {
		return {url: a, title: b, active: c, tabID: d, favIconUrl: e};
	});
var _user$project$Spelling$Model = F3(
	function (a, b, c) {
		return {word: a, suggestions: b, tabs: c};
	});
var _user$project$Spelling$init = {
	ctor: '_Tuple2',
	_0: A3(
		_user$project$Spelling$Model,
		'',
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[])),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Spelling$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'Change':
				return {
					ctor: '_Tuple2',
					_0: A3(
						_user$project$Spelling$Model,
						_p1._0,
						_elm_lang$core$Native_List.fromArray(
							[]),
						model.tabs),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Check':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Spelling$check(model.word)
				};
			case 'Suggest':
				return {
					ctor: '_Tuple2',
					_0: A3(_user$project$Spelling$Model, model.word, _p1._0, model.tabs),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Tabs':
				return {
					ctor: '_Tuple2',
					_0: A3(_user$project$Spelling$Model, model.word, model.suggestions, _p1._0),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Close':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Spelling$close(_p1._0)
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Spelling$activate(_p1._0)
				};
		}
	});
var _user$project$Spelling$Activate = function (a) {
	return {ctor: 'Activate', _0: a};
};
var _user$project$Spelling$Close = function (a) {
	return {ctor: 'Close', _0: a};
};
var _user$project$Spelling$toLi = function (tab) {
	return A2(
		_elm_lang$html$Html$a,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Spelling$onRightArrow(
				_user$project$Spelling$Close(tab.tabID)),
				_user$project$Spelling$onLeftArrow(
				_user$project$Spelling$Activate(tab.tabID)),
				_elm_lang$html$Html_Attributes$tabindex(1),
				_elm_lang$html$Html_Attributes$class('grow')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$li,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'list flex flex-row pa2 w-100 items-center ',
							tab.active ? 'bg-washed-green' : 'bg-lightest-blue'))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$img,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$src(tab.favIconUrl),
								_elm_lang$html$Html_Attributes$height(25),
								_elm_lang$html$Html_Attributes$width(25),
								_elm_lang$html$Html_Attributes$class('pl2 pr2')
							]),
						_elm_lang$core$Native_List.fromArray(
							[])),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('w-60')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(tab.title)
							])),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('w-20 red'),
								_elm_lang$html$Html_Events$onClick(
								_user$project$Spelling$Close(tab.tabID))
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('X')
							])),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('w-10'),
								_elm_lang$html$Html_Events$onClick(
								_user$project$Spelling$Activate(tab.tabID))
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('0')
							]))
					]))
			]));
};
var _user$project$Spelling$tabsList = function (model) {
	return A2(
		_elm_lang$html$Html$ul,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('pa0 flex-column flex self-center w-100')
			]),
		A2(_elm_lang$core$List$map, _user$project$Spelling$toLi, model.tabs));
};
var _user$project$Spelling$Tabs = function (a) {
	return {ctor: 'Tabs', _0: a};
};
var _user$project$Spelling$Suggest = function (a) {
	return {ctor: 'Suggest', _0: a};
};
var _user$project$Spelling$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Spelling$suggestions(_user$project$Spelling$Suggest),
				_user$project$Spelling$initialTabs(_user$project$Spelling$Tabs)
			]));
};
var _user$project$Spelling$Check = {ctor: 'Check'};
var _user$project$Spelling$Change = function (a) {
	return {ctor: 'Change', _0: a};
};
var _user$project$Spelling$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('pa2 w-100 flex flex-column container bg-lightest-blue')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$input,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('w-60 self-center ma1 br3'),
						_elm_lang$html$Html_Events$onInput(_user$project$Spelling$Change)
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('w-40 self-center ma1 br3'),
						_elm_lang$html$Html_Events$onSubmit(_user$project$Spelling$Check)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Check')
					])),
				_user$project$Spelling$tabsList(model)
			]));
};
var _user$project$Spelling$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Spelling$init, view: _user$project$Spelling$view, update: _user$project$Spelling$update, subscriptions: _user$project$Spelling$subscriptions})
};
